import {WidgetErrorHandler}                    from "../gui/WidgetErrorHandler";
import {Ax2Widget, Ix2BeforeLogic, Ix2Resized} from "./Ax2Widget";
import {Ix2HtmlDecorator}                      from "./Ix2HtmlDecorator";

export interface Ix2State<WIDGET_TYPE extends Ax2Widget = Ax2Widget> {


   /**
    *  Called after initLogic has been completed for this component AND for ALL the child components
    */
   afterChildrenInit?: () => void;

   /**
    *  Called after initLogic has been completed for this component but NOT for any child components
    *  Use the <link>onChildrenInstantiated</link> event if you need all child components to also have been initialized
    */
   afterInit?: (widget: any) => void;

   afterInitLogic ?: () => void;


   beforeInitLogic?: (args ?: Ix2BeforeLogic) => (void|Promise<void>);

   /**
    * The HTML decoration for the HTML element that of the widget
    */
   deco?: Ix2HtmlDecorator;


   /**
    * Contains all the fields that are generated by the widget initialization code
    */
   gen ?:Ix2StateGenerated<WIDGET_TYPE>

   /**
    * The current children this widget contains
    * @see initialChildren
    */
   children?: WIDGET_TYPE[]


   /**
    * If this is true, the widget will be rendered without using the <link>tagId</link> value as the id of the HTML element.
    * @see tagId
    */
   noTagIdInHtml?: boolean;

   /**
    * Set to true if the existing HTMLElement needs to be destroyed and recreated when refreshing
    */
   resetUIOnRefresh?: boolean;

   /**
    * If true, the resize is tracked for the HTML element of the widget
    */
   resizeTracked?: boolean;


   /**
    * Set to true if the widget is completely static and no refresh should take place
    */
   staticWidget?: boolean;

   /**
    * The unique id of the widget (also used as the id of the HTML element if <link>noTagIdInHtml</link> is false)
    * @see noTagIdInHtml
    */
   tagId?: string;

   onClear?: () =>  (void | Promise<void>);

   onDestroy?: () =>  (void | Promise<void>);

   onHtml?: () =>HTMLElement;

   onLogic?: () =>  (void | Promise<void>);

   onRefresh?: () =>  (void | Promise<void>);

   /**
    * Called when the widget is resized (assuming <link>widget.resizeTracked</link> is true)
    * @param evt
    */
   onResized ?: (evt?:Ix2Resized) => void;

   widgetErrorHandler?: WidgetErrorHandler;
}

export interface Ix2StateGenerated<WIDGET_TYPE extends Ax2Widget = any>{



   /**
    * the htmlElement (usually generated by <link>onHtml</link>) that underpins the widget. This is a generated property (usually)
    */
   htmlElement ?: HTMLElement;

   widget?: WIDGET_TYPE;



}

//
// /**
//  * Return true if the default logic should be executed, false if logic should return immediately
//  */
// export type functionCancellableWx2Event = (widget: Ax2Widget<any>) => Promise<boolean>;
//