import {WidgetErrorHandler}                    from "../gui/WidgetErrorHandler";
import {
   Nx2,
   Nx2Evt_BeforeLogic,
   // Nx2Evt_Refresh,
   Nx2Evt_Resized,
   // Nx2Evt_OnClear,
   Nx2Evt_OnHtml,
   Nx2Evt_OnLogic,
   Nx2Evt_Destroy, Nx2Evt_AfterLogic
} from "./Nx2";
import {Nx2HtmlDecorator}                      from "./Nx2HtmlDecorator";

export interface StateNx2 {


   /**
    *  Called after initLogic has been completed for this component AND for ALL the child components
    */
   onAfterChildrenInit?: () => void;

   /**
    *  Called after initLogic has been completed for this component but NOT for any child components
    *  Use the <link>onChildrenInstantiated</link> event if you need all child components to also have been initialized
    */
   onAfterInitWidgetOnly?: (args:Nx2Evt_AfterLogic) => void;

   /**
    * If this is specified, the widget's method (if any) will not be called.
    * Should you need to call the corresponding widget method, you can call it manually from this method
    * by using the widget instance in the parameter
    */
   onAfterInitLogic ?: (args : Nx2Evt_AfterLogic) => void;

   /**
    * If this is specified, the widget's method (if any) will not be called.
    * Should you need to call the corresponding widget method, you can call it manually from this method
    * by using the widget instance in the parameter
    */
   onBeforeInitLogic?: (args ?: Nx2Evt_BeforeLogic) => (void|Promise<void>);

   /**
    * The HTML decoration for the HTML element that of the widget
    */
   deco?: Nx2HtmlDecorator;


   /**
    * Contains all the fields that have references to this instance and are usually created by the widget initialization code
    */
   ref ?:StateNx2Ref

   /**
    * The current children this widget contains
    * @see initialChildren
    */
   children?: Nx2[]


   /**
    * If this is true, the widget will be rendered without using the <link>tagId</link> value as the id of the HTML element.
    * @see tagId
    */
   noTagIdInHtml?: boolean;

   // /**
   //  * Set to true if the existing HTMLElement needs to be destroyed and recreated when refreshing
   //  */
   // resetUIOnRefresh?: boolean;

   /**
    * If true, the resize is tracked for the HTML element of the widget
    */
   resizeTracked?: boolean;


   // /**
   //  * Set to true if the widget is completely static and no refresh should take place
   //  */
   // staticWidget?: boolean;

   /**
    * The unique id of the widget (also used as the id of the HTML element if <link>noTagIdInHtml</link> is false)
    * @see noTagIdInHtml
    */
   tagId?: string;

   // onClear?: (args:Nx2Evt_OnClear) =>  void ;

   onDestroy?: (args: Nx2Evt_Destroy) =>  void ;

   onHtml?: (args:Nx2Evt_OnHtml) =>HTMLElement;

   onLogic?: (args : Nx2Evt_OnLogic) =>  void;

   // onRefresh?: (args ?: Nx2Evt_Refresh) =>  void;
   /**
    * Called when the widget is resized (assuming <link>widget.resizeTracked</link> is true)
    * @param evt
    */
   onResized ?: (evt?:Nx2Evt_Resized) => void;

   widgetErrorHandler?: WidgetErrorHandler;

   onBeforeInitHtml ?: (args: Nx2Evt_OnHtml) => void;
}

export interface StateNx2Ref {

   /**
    * the htmlElement (usually generated by <link>onHtml</link>) that underpins the widget. This is a generated property (usually)
    */
   htmlElement ?: HTMLElement;

   widget?: Nx2;



}